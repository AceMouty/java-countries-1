
# Define standard configuration

# Enable the h2 console for our application
# Postgres has pgAdmin as the console, h2 has the h2 console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
#
# Tomcat: Tomcat is the webserver that will run in the background that will take in a request, send it to the application and then take the application response
# and send it back OUT to the client
#
# configure port to be ENV VAR port or default to 2019. The default is 8080
server.port=${PORT:2019}
#
# Jackson: convert from incoming JSON to Java Objects / Beans and then convert back from Java Objects / Beans to JSON
# When Jackson converts JSON to Java or Java to JSOn, if there is a empty object it will crash the application by default.
# We dont want this to happen, we want it to treat it as a empty Bean / Empty JSON / Empty Object, that's fine keep going dont crash
# POJO -> A Java Object that is a vanilla default object
# Bean -> A Java Object controlled by Spring
spring.jackson.serialization.fail-on-empty-beans=false
#
# JPA: Once JPA creates a connection to the DB we want it to keep that connection open until we read in ALL the records coming in then close the connection.
# By default the JPA will do the following....
# create a connection, insert a row, kill the current connect, open a new connection, insert the next row, repeat. This is safer and more secure however this takes forever
# to insert records.
spring.jpa.open-in-view=true
#
# Hibernate: Hibernate is our ORM. This allows us to convert Java Object's to a database table, column and row.
# Java <--> DB
# Auto create the DB everytime we run the application, we will need to change this in production however
spring.jpa.hibernate.ddl-auto=create
# Always load in seed data
spring.datasource.initialization-mode=always